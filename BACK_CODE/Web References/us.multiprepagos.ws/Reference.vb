'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34014
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'Microsoft.VSDesigner generó automáticamente este código fuente, versión=4.0.30319.34014.
'
Namespace us.multiprepagos.ws
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="Recargas_ElectronicasSoap", [Namespace]:="DMM")>  _
    Partial Public Class Recargas_Electronicas
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private rechargeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private balanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.BACK_CODE.My.MySettings.Default.BACK_CODE_us_multiprepagos_ws_Recargas_Electronicas
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event rechargeCompleted As rechargeCompletedEventHandler
        
        '''<remarks/>
        Public Event balanceCompleted As balanceCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("DMM/recharge", RequestNamespace:="DMM", ResponseNamespace:="DMM", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function recharge(ByVal user As String, ByVal password As String, ByVal carrier As String, ByVal number As String, ByVal amount As String, ByVal point As String) As String
            Dim results() As Object = Me.Invoke("recharge", New Object() {user, password, carrier, number, amount, point})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub rechargeAsync(ByVal user As String, ByVal password As String, ByVal carrier As String, ByVal number As String, ByVal amount As String, ByVal point As String)
            Me.rechargeAsync(user, password, carrier, number, amount, point, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub rechargeAsync(ByVal user As String, ByVal password As String, ByVal carrier As String, ByVal number As String, ByVal amount As String, ByVal point As String, ByVal userState As Object)
            If (Me.rechargeOperationCompleted Is Nothing) Then
                Me.rechargeOperationCompleted = AddressOf Me.OnrechargeOperationCompleted
            End If
            Me.InvokeAsync("recharge", New Object() {user, password, carrier, number, amount, point}, Me.rechargeOperationCompleted, userState)
        End Sub
        
        Private Sub OnrechargeOperationCompleted(ByVal arg As Object)
            If (Not (Me.rechargeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent rechargeCompleted(Me, New rechargeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("DMM/balance", RequestNamespace:="DMM", ResponseNamespace:="DMM", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function balance(ByVal user As String, ByVal password As String) As String
            Dim results() As Object = Me.Invoke("balance", New Object() {user, password})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub balanceAsync(ByVal user As String, ByVal password As String)
            Me.balanceAsync(user, password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub balanceAsync(ByVal user As String, ByVal password As String, ByVal userState As Object)
            If (Me.balanceOperationCompleted Is Nothing) Then
                Me.balanceOperationCompleted = AddressOf Me.OnbalanceOperationCompleted
            End If
            Me.InvokeAsync("balance", New Object() {user, password}, Me.balanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnbalanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.balanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent balanceCompleted(Me, New balanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub rechargeCompletedEventHandler(ByVal sender As Object, ByVal e As rechargeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class rechargeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")>  _
    Public Delegate Sub balanceCompletedEventHandler(ByVal sender As Object, ByVal e As balanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class balanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
